'''
Solution to the Decoder assignment in Machine Translation, Fall 2020
Submission by: Ishita Tripathi

Some of this code was taken from the monotone decoder provided in the assignment
'''

#!/usr/bin/env python
import optparse
import sys
import models
from collections import namedtuple

optparser = optparse.OptionParser()
optparser.add_option("-i", "--input", dest="input", default="data/input", help="File containing sentences to translate (default=data/input)")
optparser.add_option("-t", "--translation-model", dest="tm", default="data/tm", help="File containing translation model (default=data/tm)")
optparser.add_option("-l", "--language-model", dest="lm", default="data/lm", help="File containing ARPA-format language model (default=data/lm)")
optparser.add_option("-n", "--num_sentences", dest="num_sents", default=sys.maxsize, type="int", help="Number of sentences to decode (default=no limit)")
optparser.add_option("-k", "--translations-per-phrase", dest="k", default=1, type="int", help="Limit on number of translations to consider per phrase (default=1)")
optparser.add_option("-s", "--stack-size", dest="s", default=1, type="int", help="Maximum stack size (default=1)")
optparser.add_option("-v", "--verbose", dest="verbose", action="store_true", default=False,  help="Verbose mode (default=off)")
opts = optparser.parse_args()[0]

tm = models.TM(opts.tm, opts.k)
lm = models.LM(opts.lm)
french = [tuple(line.strip().split()) for line in open(opts.input).readlines()[:opts.num_sents]]

# tm should translate unknown words as-is with probability 1
for word in set(sum(french,())): # for word in vocab of input
  if (word,) not in tm:
    tm[(word,)] = [models.phrase(word, 0.0)]

def decode(f):
    hypothesis = namedtuple("hypothesis", "logprob, lm_state, predecessor, phrase, done")
    done = [0 for i in range(len(f))] # keep track of how many phrases are done
    initial_hypothesis = hypothesis(0.0, lm.begin(), None, None, done) # change here too
    stacks = [{} for _ in f] + [{}]

    # differentiate between stacks based on count of words translated
    stacks[0][lm.begin()] = initial_hypothesis
    for i, stack in enumerate(stacks[:-1]):  # get all but the last stack
      for h in sorted(stack.values(),key=lambda h: -h.logprob)[:opts.s]: # prune

          '''
          Just a recap of the slides: feel free to ignore

          # create hypothesis for all possible translation options
          # also create hypothesis from partial hypotheses
          # backtrack from highest scoring hypothesis
          # go through all hypothesis in stack. Get all translation options. If it does not translate something already in stack,
          #   make new hypothesis
          # translation option is applied to a hypothesis
          #   new hypothesis is dropped into the next stack
          '''
          # get all translation options possible, and try them on h
          # Look for phrases starting anywhere, not just after i
          for k in range(0,len(f)): # k is start of french
              for j in range(k+1,len(f)+1): # end of french
                  if any(h.done[x] for x in range(k,j)):
                      # check if this is valid - has already been translated in hypo
                      continue
                  if f[k:j] in tm: #for french phrases starting from k
                    for phrase in tm[f[k:j]]: # for all translation options

                      # copy the last done matrix - my variables names, wow
                      new_done = h.done.copy()

                      logprob = h.logprob + phrase.logprob
                      lm_state = h.lm_state

                      for word in phrase.english.split():
                        (lm_state, word_logprob) = lm.score(lm_state, word)

                        logprob += word_logprob
                      logprob += lm.end(lm_state) if j == len(f) -1 else 0.0

                      for x in range(k,j):
                          new_done[x] = 1
                      c = new_done.count(1)

                      new_hypothesis = hypothesis(logprob, lm_state, h, phrase, new_done)
                      not_lm_state = ''.join(map(str,new_done)) # not saving lm_state gives better log prob
                      if not_lm_state not in stacks[c] or stacks[c][not_lm_state].logprob < logprob:
                        # second case is recombination
                        stacks[c][not_lm_state] = new_hypothesis
      '''
      print stacks
      '''
      '''for i, stack in enumerate(stacks[:-1]):
          print(stack)
      '''
    winner = max(stacks[-1].values(), key=lambda h: h.logprob)
    return winner

sys.stderr.write("Decoding %s...\n" % (opts.input,))
for f in french:
    # decode() just uses a stack decoder... made a new function because some
    # variable was leaking between iterations, and leading to one-off errors
    # in translation
    winner = decode(f)
    # print(winner)
    def extract_english(h):
        return "" if h.predecessor is None else "%s%s " % (extract_english(h.predecessor), h.phrase.english)
    print(extract_english(winner))

    if opts.verbose:
        def extract_tm_logprob(h):
          return 0.0 if h.predecessor is None else h.phrase.logprob + extract_tm_logprob(h.predecessor)

        tm_logprob = extract_tm_logprob(winner)
        sys.stderr.write("LM = %f, TM = %f, Total = %f\n" %
            (winner.logprob - tm_logprob, tm_logprob, winner.logprob))
